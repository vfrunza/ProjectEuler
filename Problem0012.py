#Problem 0012 - Highly Divisible Triangular Number
#===============================================================================
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

#Answer: 76576500
#First Version Time: 0.5020 Seconds Per 100 iterations
#===============================================================================
import math
from functools import reduce
from timeit import default_timer as timer

def main():
    loops = 100

    start = timer()
    for x in range (0, loops):
        result = problem()
    end = timer()

    print(result)
    print(str((end - start)) + " seconds") 

def triangular(n):
    return int((n * (n + 1))/2)

def pr_factorize(n, factors):
    if factors == None:
        factors = []
    
    if n % 2 == 0:
        factors.append(2)
        return pr_factorize(n / 2, factors)

    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if not n % i:
            factors.append(i)
            break
            
    else:
        factors.append(int(n))
        return factors
    return pr_factorize(n / i, factors)

def count_divisors(pr_factors):
    powers = []
    counter = 0
    current = 0
    cursor = pr_factors[0]

    for item in pr_factors:
        if item == cursor:
            counter += 1
        
        else:
            powers.append(counter + 1)
            counter = 1
            cursor = item
    powers.append(counter + 1)
    return powers

def problem():
    i = 2

    while True:
        tri_num = triangular(i)
        factors = pr_factorize(tri_num, [])
        exp_list = count_divisors(factors)
        divisors = reduce(lambda x, y: x*y, count_divisors(factors))

        if divisors > 500:
            return tri_num
        i += 1

main()