#Problem 0012 - Highly Divisible Triangular Number
#===============================================================================
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

#Answer: 
#First Version Time:  Seconds Per 100 iterations
#Second Version Time:  Seconds Per 100 iterations
#===============================================================================
import math
from timeit import default_timer as timer

def main():
    loops = 1

    start = timer()
    for x in range (0, loops):
        result = problem()
    end = timer()

    print(result)
    print(str((end - start)) + " seconds") 

def triangular(n):
    return sum(list(range(1, n + 1)))

def factorize(n):
    factors = []
    for i in range(math.floor(math.sqrt(n)), 1, -1):
        if n % i == 0:
            factors.append(i)
    return factors

def problem():
    i = 1000000000

    while True:
        tri_num = triangular(i)
        factors = factorize(tri_num)
        print(len(factors))

        if len(factorize(triangular(i))) == 500:
            return triangular(i)
        i += 1

main()